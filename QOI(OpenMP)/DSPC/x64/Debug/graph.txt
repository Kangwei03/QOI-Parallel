import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Read the CSV file
df = pd.read_csv('performance_data_multi.csv')

# Create figure with two subplots side by side
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 8))

def plot_operation(ax, data_df, operation_type):
    # Create a copy and calculate readable file sizes
    data_df = data_df.copy()
    data_df['FileSizeMB'] = data_df['FileSize'] / (1024 * 1024)  # Convert to MB
    data_df['FileSizeLabel'] = data_df.apply(
        lambda row: f"{row['FileSizeMB']:.1f}MB\n({row['ImageWidth']}x{row['ImageHeight']})", 
        axis=1
    )

    # Print debug information
    print(f"\nDebug info for {operation_type}:")
    print("Total rows in data:", len(data_df))
    print("Unique file sizes:", data_df['FileSize'].nunique())
    print("Thread counts:", data_df['ThreadCount'].unique())

    # Create base file size mapping (sorted by file size)
    unique_sizes = data_df.sort_values('FileSize')['FileSizeLabel'].unique()
    size_to_index = {size: i for i, size in enumerate(unique_sizes)}

    # Create color map for different thread counts
    colors = ['blue', 'red', 'green', 'orange', 'purple']

    # Plot serial (ThreadCount = 1)
    serial_data = data_df[data_df['ThreadCount'] == 1].sort_values('FileSize')
    x_points = [size_to_index[size] for size in serial_data['FileSizeLabel']]

    print(f"Serial data points: {len(x_points)}")
    print(f"Serial time points: {len(serial_data['ProcessingTime'])}")

    ax.plot(x_points, 
            serial_data['ProcessingTime'].values,
            color=colors[0],
            marker='o',
            label='Serial',
            linewidth=2,
            markersize=6)

    # Plot OpenMP data for each thread count
    thread_counts = [2, 4, 6, 8]
    for idx, tc in enumerate(thread_counts, 1):
        thread_data = data_df[data_df['ThreadCount'] == tc].sort_values('FileSize')
        x_points = [size_to_index[size] for size in thread_data['FileSizeLabel']]

        print(f"Thread {tc} data points: {len(x_points)}")
        print(f"Thread {tc} time points: {len(thread_data['ProcessingTime'])}")

        ax.plot(x_points, 
                thread_data['ProcessingTime'].values,
                color=colors[idx],
                marker='o',
                label=f'OpenMP {tc} Threads',
                linewidth=2,
                markersize=6)

    ax.set_title(f'QOI {operation_type} Operation Execution Time')
    ax.set_xlabel('File Size and Dimensions')
    ax.set_ylabel('Average Time (seconds)')
    ax.grid(True, linestyle='--', alpha=0.7)
    ax.legend()

    # Set x-ticks and labels
    ax.set_xticks(range(len(unique_sizes)))
    ax.set_xticklabels(unique_sizes, rotation=45, ha='right')
    ax.set_ylim(bottom=0)

# Add main title
fig.suptitle('Performance Comparison: Serial vs OpenMP Implementation', fontsize=14, y=1.02)

# Plot encode and decode
plot_operation(ax1, df[df['Operation'] == 'Encode'], 'Encode')
plot_operation(ax2, df[df['Operation'] == 'Decode'], 'Decode')

# Adjust layout to prevent label cutoff
plt.tight_layout(pad=2.0)

# Save with higher quality and larger size
plt.savefig('execution_times_comparison_combined.png', dpi=300, bbox_inches='tight')
plt.close()